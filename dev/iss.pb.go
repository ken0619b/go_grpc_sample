// Code generated by protoc-gen-go. DO NOT EDIT.
// source: iss.proto

package iss

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type IssRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IssRequest) Reset()         { *m = IssRequest{} }
func (m *IssRequest) String() string { return proto.CompactTextString(m) }
func (*IssRequest) ProtoMessage()    {}
func (*IssRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4352da8c8d17a2a0, []int{0}
}

func (m *IssRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IssRequest.Unmarshal(m, b)
}
func (m *IssRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IssRequest.Marshal(b, m, deterministic)
}
func (m *IssRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IssRequest.Merge(m, src)
}
func (m *IssRequest) XXX_Size() int {
	return xxx_messageInfo_IssRequest.Size(m)
}
func (m *IssRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IssRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IssRequest proto.InternalMessageInfo

type IssResponse struct {
	Longitude            string   `protobuf:"bytes,1,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Latitude             string   `protobuf:"bytes,2,opt,name=latitude,proto3" json:"latitude,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IssResponse) Reset()         { *m = IssResponse{} }
func (m *IssResponse) String() string { return proto.CompactTextString(m) }
func (*IssResponse) ProtoMessage()    {}
func (*IssResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4352da8c8d17a2a0, []int{1}
}

func (m *IssResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IssResponse.Unmarshal(m, b)
}
func (m *IssResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IssResponse.Marshal(b, m, deterministic)
}
func (m *IssResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IssResponse.Merge(m, src)
}
func (m *IssResponse) XXX_Size() int {
	return xxx_messageInfo_IssResponse.Size(m)
}
func (m *IssResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_IssResponse.DiscardUnknown(m)
}

var xxx_messageInfo_IssResponse proto.InternalMessageInfo

func (m *IssResponse) GetLongitude() string {
	if m != nil {
		return m.Longitude
	}
	return ""
}

func (m *IssResponse) GetLatitude() string {
	if m != nil {
		return m.Latitude
	}
	return ""
}

func init() {
	proto.RegisterType((*IssRequest)(nil), "IssRequest")
	proto.RegisterType((*IssResponse)(nil), "IssResponse")
}

func init() { proto.RegisterFile("iss.proto", fileDescriptor_4352da8c8d17a2a0) }

var fileDescriptor_4352da8c8d17a2a0 = []byte{
	// 139 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcc, 0x2c, 0x2e, 0xd6,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0xe2, 0xe1, 0xe2, 0xf2, 0x2c, 0x2e, 0x0e, 0x4a, 0x2d, 0x2c,
	0x4d, 0x2d, 0x2e, 0x51, 0x72, 0xe7, 0xe2, 0x06, 0xf3, 0x8a, 0x0b, 0xf2, 0xf3, 0x8a, 0x53, 0x85,
	0x64, 0xb8, 0x38, 0x73, 0xf2, 0xf3, 0xd2, 0x33, 0x4b, 0x4a, 0x53, 0x52, 0x25, 0x18, 0x15, 0x18,
	0x35, 0x38, 0x83, 0x10, 0x02, 0x42, 0x52, 0x5c, 0x1c, 0x39, 0x89, 0x25, 0x10, 0x49, 0x26, 0xb0,
	0x24, 0x9c, 0x6f, 0x64, 0xc2, 0xc5, 0xec, 0x59, 0x5c, 0x2c, 0xa4, 0xcb, 0xc5, 0xe7, 0x9e, 0x5a,
	0xe2, 0x59, 0x5c, 0xec, 0x93, 0x9f, 0x9c, 0x58, 0x92, 0x99, 0x9f, 0x27, 0xc4, 0xad, 0x87, 0xb0,
	0x4e, 0x8a, 0x47, 0x0f, 0xc9, 0x36, 0x25, 0x86, 0x24, 0x36, 0xb0, 0x9b, 0x8c, 0x01, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x92, 0x1b, 0xd9, 0x60, 0xa0, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// IssClient is the client API for Iss service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IssClient interface {
	// Sends a greeting
	// rpc SayHello (HelloRequest) returns (HelloReply) {}
	GetIssLocation(ctx context.Context, in *IssRequest, opts ...grpc.CallOption) (*IssResponse, error)
}

type issClient struct {
	cc *grpc.ClientConn
}

func NewIssClient(cc *grpc.ClientConn) IssClient {
	return &issClient{cc}
}

func (c *issClient) GetIssLocation(ctx context.Context, in *IssRequest, opts ...grpc.CallOption) (*IssResponse, error) {
	out := new(IssResponse)
	err := c.cc.Invoke(ctx, "/Iss/GetIssLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IssServer is the server API for Iss service.
type IssServer interface {
	// Sends a greeting
	// rpc SayHello (HelloRequest) returns (HelloReply) {}
	GetIssLocation(context.Context, *IssRequest) (*IssResponse, error)
}

func RegisterIssServer(s *grpc.Server, srv IssServer) {
	s.RegisterService(&_Iss_serviceDesc, srv)
}

func _Iss_GetIssLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssServer).GetIssLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Iss/GetIssLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssServer).GetIssLocation(ctx, req.(*IssRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Iss_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Iss",
	HandlerType: (*IssServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetIssLocation",
			Handler:    _Iss_GetIssLocation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "iss.proto",
}
